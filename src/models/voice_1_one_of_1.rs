/*
 * Cartesia REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024-06-10
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Voice1OneOf1 {
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<Mode>,
    #[serde(rename = "embedding", skip_serializing_if = "Option::is_none")]
    pub embedding: Option<Vec<f64>>,
}

impl Voice1OneOf1 {
    pub fn new() -> Voice1OneOf1 {
        Voice1OneOf1 {
            mode: None,
            embedding: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "embedding")]
    Embedding,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Embedding
    }
}

